{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","time","Date","toLocaleTimeString","seconds","getSeconds","useState","date","setDate","setInterval","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+JA0BeA,EAxBH,WACV,IAAIC,GAAO,IAAIC,MAAOC,qBAClBC,GAAU,IAAIF,MAAOG,aACzB,EAAsBC,mBAASL,GAA/B,mBAAMM,EAAN,KAAWC,EAAX,KAUA,OAFAC,aANmB,WACjBR,GAAO,IAAIC,MAAOC,qBAClBK,EAAQP,GACRG,GAAU,IAAIF,MAAOG,eAGC,KAGtB,sBAAKK,UAAU,QAAf,UACE,qBAAKA,UAAU,OAAf,SACE,sBAAMA,UAAYN,EAAQ,GAAM,EAAI,kBAAoB,kBAAxD,SAA6EG,MAE/E,gCAAUH,EAAQ,GAAM,EAAI,+CAAiD,qDCRpEO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.744a8318.chunk.js","sourcesContent":["import React, {useEffect,useState} from 'react';\n\nconst App = () => {\n  let time = new Date().toLocaleTimeString();\n  let seconds = new Date().getSeconds();\n  const[date,setDate] = useState(time);\n\n  const updateTime = () =>{\n    time = new Date().toLocaleTimeString();\n    setDate(time);\n    seconds = new Date().getSeconds();\n  }\n\n  setInterval(updateTime, 1000);\n\n  return(\n    <div className=\"clock\">\n      <div className=\"time\">\n        <span className={(seconds%2) == 0 ? 'time-span-black' : 'time-span-white' }>{date}</span>\n      </div>\n      <style>{ (seconds%2) == 0 ? 'body {background-color : black; color:white}' : 'body {background-color : white; color:black}' }</style>\n    </div>\n\n  )\n}\n\nexport default App;\n\n// class App extends Component{\n\n//   constructor(props){\n//     super(props)\n\n//     this.state = {\n//       date : new Date(),\n//     }\n//   }\n\n//     componentDidMount(){\n//       this.interval = setInterval(() => {\n//         this.setState({date : new Date()})\n//       }, 1000);\n//     }\n//     componentWillUnmount(){\n//       clearInterval(this.interval);\n//   }\n\n//   render(){\n//     return(\n//       <div className=\"clock\">\n//         <h1 className=\"time\">\n//           {this.state.date.toLocaleTimeString()}\n//         </h1>\n//       </div>\n//     )\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}